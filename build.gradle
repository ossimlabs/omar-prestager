plugins {
  id "groovy"
  id "application"
  id "com.google.cloud.tools.jib" version "2.5.0"
  id "com.github.ben-manes.versions" version "0.31.0"
}

version "0.1"
group "omar.prestager"

repositories {
  mavenCentral()
  jcenter()
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

dependencies {

  compile group: 'commons-io', name: 'commons-io', version: '2.8.0'

  compileOnly( platform( "io.micronaut:micronaut-bom:$micronautVersion" ) )
  compileOnly( "io.micronaut:micronaut-inject-groovy" )
  compileOnly("io.micronaut.configuration:micronaut-openapi")
  implementation( platform( "io.micronaut:micronaut-bom:$micronautVersion" ) )
  implementation( "io.micronaut:micronaut-inject" )
  implementation( "io.micronaut:micronaut-validation" )
  implementation( "io.micronaut.groovy:micronaut-runtime-groovy" )
  implementation( "io.micronaut:micronaut-http-server-netty" )
  implementation( "io.micronaut:micronaut-http-client" )
  implementation("io.swagger.core.v3:swagger-annotations")
  implementation("io.micronaut:micronaut-management")
  implementation( "io.micronaut:micronaut-management" )
  developmentOnly( "io.micronaut:micronaut-runtime-osx:$micronautVersion" )
  runtimeOnly( "ch.qos.logback:logback-classic" )
  runtimeOnly("org.postgresql:postgresql")
  testImplementation( enforcedPlatform( "io.micronaut:micronaut-bom:$micronautVersion" ) )
  testImplementation( "io.micronaut:micronaut-inject-groovy" )
  testImplementation( "org.spockframework:spock-core" ) {
    exclude group: "org.codehaus.groovy", module: "groovy-all"
  }
  testImplementation( "io.micronaut.test:micronaut-test-spock" )
  testImplementation(platform("org.testcontainers:testcontainers-bom:1.14.3"))
  testRuntimeOnly("org.testcontainers:postgresql")
}

test.classpath += configurations.developmentOnly

mainClassName = "omar.prestager.Application"

// use JUnit 5 platform
test {
  useJUnitPlatform()
}

java {
  sourceCompatibility = JavaVersion.toVersion( '1.8' )
  targetCompatibility = JavaVersion.toVersion( '1.8' )
}

tasks.withType( GroovyCompile ) {
  groovyOptions.forkOptions.jvmArgs.add( '-Dgroovy.parameters=true' )
  groovyOptions.forkOptions.jvmArgs.add('-Dmicronaut.openapi.views.spec=redoc.enabled=true,rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop')
}


tasks.withType( JavaExec ) {
  classpath += configurations.developmentOnly
  jvmArgs( '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote' )
  if ( gradle.startParameter.continuous ) {
    systemProperties(
        'micronaut.io.watch.restart': 'true',
        'micronaut.io.watch.enabled': 'true',
        "micronaut.io.watch.paths": "src/main"
    )
  }
}


jib {
  from {
    image = 'docker://ossim-runtime-alpine'
  }
  to {
    image = 'chimera/omar-prestager'
  }
}

